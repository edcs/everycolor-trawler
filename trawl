#!/usr/bin/env node
require('dotenv').config();

const cli = require('cli');
const Twitter = require('twitter');

/**
 * Creates a new instance of the Twitter client.
 *
 * @type {Twitter}
 */
const client = new Twitter({
    consumer_key: process.env.TWITTER_API_KEY,
    consumer_secret: process.env.TWITTER_API_SECRET,
    access_token_key: process.env.TWITTER_ACCESS_TOKEN,
    access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET,
});

/**
 * Synchronously handles an asynchronous promise.
 *
 * @param {function} fn
 */
const synchronousPromiseHandler = fn => {
    let iterator = fn();
    let loop = result => {
        !result.done && result.value.then(
            res => loop(iterator.next(res)),
            err => loop(iterator.throw(err))
        );
    };

    loop(iterator.next());
};

/**
 * Parses a collection of Tweets into a friendly array.
 *
 * @param {Array} tweets
 * @returns {Array}
 */
const parseTweetCollection = (tweets) => {
    let collection = [];

    for (const tweet of tweets) {
        collection.push({
            id: tweet.id_str,
            color: tweet.text.split(' ')[0].replace('0x', '#'),
            interactions: tweet.favorite_count + tweet.retweet_count,
        });
    }

    return collection;
};

/**
 * Parses through all available Tweets and stores the results.
 */
synchronousPromiseHandler(function* () {
    let params = {
        count: 200,
        trim_user: true,
        include_rts: false,
        exclude_replies: true,
        screen_name: 'everycolorbot',
    };

    let collection = [];

    try {
        for (let i = 0; i < 100; i++) {
            collection = parseTweetCollection(yield client.get('statuses/user_timeline', params));
            params.max_id = collection[collection.length - 1].id;

            cli.progress(i / 100)
        }

        cli.progress(1);
        console.log(collection);
    } catch (err) {
        console.log(err.message);
    }
});
